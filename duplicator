#!/bin/bash

# Tool to make multiple duplicates of a distro sks installation.
# The copies will share a dump, reducing the disk requirements iff the
# original was initialised using 'fastbuild'. 
#
# We assume systemd.

SKS_EXTRA_COPIES=$1

: "${SKS_CONF_DIR=/etc/sks}"
: "${SKS_DATA_DIR=/var/lib/sks}"
: "${SYSTEMD_UNIT_DIR=/lib/systemd/system}"
: "${SYSTEMD_CONF_DIR=/etc/systemd/system}"
: "${SKS_DAEMON_USER=debian-sks}"
: "${SKS_EXTRA_COPIES=2}"

# shut down main service to ensure db consistency
systemctl stop sks

# reconfigure main node (should be idempotent?)
perl -ni.bak -e "
  next if /^nodename/;
  next if /^hkp_address/;
  next if /^hkp_port/;
  next if /^recon_address/;
  next if /^recon_port/;
  next if /^gossip_interval/;
  next if /^stat_hour/;
  next if /^use_port_80/;
  print;
" "$SKS_CONF_DIR/sksconf"
cat <<EOF >> "$SKS_CONF_DIR/sksconf"
nodename: sks-0
recon_address: 0.0.0.0
recon_port: 11370
hkp_address: 127.0.0.1
hkp_port: 11371
gossip_interval: 5
stat_hour: 0
EOF

# set up services
cat <<EOF > "$SYSTEMD_UNIT_DIR/sks-recon.service"
[Unit]
Description=SKS reconciliation service (master)
BindsTo=sks.service
After=sks.service
Documentation=man:sks(8)

[Service]
Type=simple
ExecStart=/usr/sbin/sks -stdoutlog recon
User=$SKS_DAEMON_USER
WorkingDirectory=$SKS_DATA_DIR
Restart=on-failure
RestartSec=5s

[Install]
WantedBy=multi-user.target
EOF
cat <<EOF > "$SYSTEMD_CONF_DIR/sks.service"
[Unit]
Description=SKS database service (master)
Wants=sks-recon.service
Before=sks-recon.service
After=local-fs.target network.target 
Documentation=man:sks(8)

[Service]
Type=simple
ExecStart=/usr/sbin/sks -stdoutlog db
User=$SKS_DAEMON_USER
RuntimeDirectory=sks
RuntimeDirectoryMode=700
WorkingDirectory=$SKS_DATA_DIR
Restart=on-failure
RestartSec=5s

[Install]
WantedBy=multi-user.target
EOF

# add main node to internal membership (idempotent)
[[ -f "$SKS_CONF_DIR/membership.internal" ]] || \
  echo "127.0.0.1 11370 # sks-0" > "$SKS_CONF_DIR/membership.internal"

# enable search into shared dump dir
chmod og+x "$SKS_DATA_DIR"

for i in $(seq 1 $SKS_EXTRA_COPIES); do
  basedir="${SKS_DATA_DIR}-$i"
  # Idempotency
  [[ ! -e "$basedir" ]] || continue

  nodename="sks-$i"
  recon_port=$(( 20370 + i * 1000 ))
  hkp_port=$(( 20371 + i * 1000 ))
  daemon_user="${SKS_DAEMON_USER}-$i"

  # create directory structure
  mkdir -p "$basedir$SKS_CONF_DIR"
  mkdir -p "$basedir$SKS_DATA_DIR"
  mkdir -p "$basedir/var/spool/sks"
  mkdir -p "$basedir/var/run"
  ln -s "/var/run/sks-$i" "$basedir/var/run/sks"

  # clone datadir but soft link dump (read-only)
  rsync -a --exclude dump "$SKS_DATA_DIR/" "$basedir$SKS_DATA_DIR"
  ln -s "${SKS_DATA_DIR}/dump" "$basedir$SKS_DATA_DIR/"

  # set permissions
  adduser --system --group --home "$basedir$SKS_DATA_DIR" "$daemon_user"
  chown -R "$daemon_user:$daemon_user" "$basedir$SKS_DATA_DIR"
  chown -R "$daemon_user:$daemon_user" "$basedir/var/spool/sks"

  # copy and edit configuration
  ln -s "$SKS_CONF_DIR/membership.internal" "$basedir$SKS_CONF_DIR/membership"
  < "$SKS_CONF_DIR/sksconf" > "$basedir$SKS_CONF_DIR/sksconf" perl -ne "
    next if /^nodename/;
    next if /^recon_address/;
    next if /^recon_port/;
    next if /^hkp_address/;
    next if /^hkp_port/;
    next if /^gossip_interval/;
    next if /^stat_hour/;
    next if /^use_port_80/;
    print;
  "
  cat <<EOF >> "$basedir$SKS_CONF_DIR/sksconf"
nodename: $nodename
recon_address: 0.0.0.0
recon_port: $recon_port
hkp_address: 127.0.0.1 ::1
hkp_port: $hkp_port
gossip_interval: 1
stat_hour: $i
EOF

  # add self to membership files
  echo "127.0.0.1 $recon_port # $nodename" >> "$SKS_CONF_DIR/membership"
  echo "127.0.0.1 $recon_port # $nodename" >> "$SKS_CONF_DIR/membership.internal"

  # set up services
  cat <<EOF > "$SYSTEMD_CONF_DIR/sks-recon-$i.service"
[Unit]
Description=SKS reconciliation service (node $i)
BindsTo=sks-$i.service
After=sks-$i.service
Documentation=man:sks(8)

[Service]
Type=simple
ExecStart=/usr/sbin/sks -basedir $basedir -stdoutlog recon
User=$daemon_user
WorkingDirectory=$basedir$SKS_DATA_DIR
Restart=on-failure
RestartSec=5s

[Install]
WantedBy=multi-user.target
EOF
  cat <<EOF > "$SYSTEMD_CONF_DIR/sks-$i.service"
[Unit]
Description=SKS database service (node $i)
Wants=sks-recon-$i.service
Before=sks-recon-$i.service
After=local-fs.target network.target 
Documentation=man:sks(8)

[Service]
Type=simple
ExecStart=/usr/sbin/sks -basedir $basedir -stdoutlog db
User=$daemon_user
RuntimeDirectory=sks-$i
RuntimeDirectoryMode=700
WorkingDirectory=$basedir$SKS_DATA_DIR
Restart=on-failure
RestartSec=5s

[Install]
WantedBy=multi-user.target
EOF
  
  # clone cron job
  < /etc/cron.daily/sks > /etc/cron.daily/sks-$i perl -pe "
    s,/var/lib/sks,/var/lib/sks-$i/var/lib/sks,g;
    s,/var/spool/sks,/var/lib/sks-$i/var/spool/sks,g;
  "
  chmod +x /etc/cron.daily/sks-$i

  systemctl enable sks-$i
  systemctl start sks-$i
done

# start main service
systemctl start sks
